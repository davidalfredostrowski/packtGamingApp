import React,{ Component } from 'react'
import Web3 from 'web3'
import './App.css';


class Form extends Component{

    constructor(props){
	super(props)
	this.state = { selectedOption: ' ', wager: 0, account: '', player1: '' ,
            playerNumber: '',
            highLow: 'lower',
            wager: '',
            historyData: [],
            snackbar: false,
            message: '',
       	    currentBalance: '',
	    owner: '' 
	}
	this.handleChange = this.handleChange.bind(this)
        this.onValueChange = this.onValueChange.bind(this);
	this.handleSubmit = this.handleSubmit.bind(this)
    }


    componentWillMount(){
        this.loadBlockchainData()
    }


    async loadBlockchainData(){

	console.log('just before the connect')
	const web3 = new Web3(new Web3.providers.HttpProvider("http://ec2-35-81-165-19.us-west-2.compute.amazonaws.com:8545"))
	this.setState({ web3 : web3 })
	const accounts = await web3.eth.getAccounts()
	this.setState({ account: accounts[0] })
	const owner = accounts[0]
	const player1 = accounts[1]
	this.setState({ player1 })
	let jsonData = require('./Gaming.json')
	const contract = new web3.eth.Contract(jsonData.abi);
	this.setState({ contract }) 
	this.setState({ data: contract })
	this.setState({ contract: contract })
        this.setState({ owner: owner } )
//	const networkId = await web3.eth.net.getId();
//        var networkKey =  Object.keys(jsonData['networks'])[Object.keys(jsonData.networks).length-1] 
//        contract.options.address = jsonData['networks'][networkId]["address"]
//	contract.methods.fundGame().send({from: owner, value: web3.utils.toWei('10', 'ether')}).then((f) => console.log(f))	
//	const initialBalance = await web3.eth.getBalance(player1)
//	alert("initialBalance     " + String(initialBalance));
//	console.log("initialBalance",initialBalance)
//	const initialBalanceInEther = Number(web3.utils.fromWei(initialBalance, 'ether'))
//	this.setState({ currentBalance : String( initialBalanceInEther) })
    }
	// true:  mystery number > player
	// false: mystery number < player

async handleSubmit(event){

 } 


handleChange(event){
    this.setState({
      wager: event.target.value
    });
}

onValueChange(event) {
    this.setState({
      selectedOption: event.target.value
    });
}
// Return a controlled form i.e. values of the
// input field not stored in DOM values are exist
// in react component itself as state
render(){
	return(
	<form onSubmit={this.handleSubmit}>
        <div className="radio">
          <label>
            <input
              type="radio"
              value="High"
              checked={this.state.selectedOption === "High"}
              onChange={this.onValueChange}
            />
            Mystery number is higher
          </label>
        </div>
        <div className="radio">
          <label>
            <input
              type="radio"
              value="Low"
              checked={this.state.selectedOption === "Low"}
              onChange={this.onValueChange}
            />
            Mystery Number is lower
          </label>
        </div>      
         <div>
          Selected option is : { this.state.selectedOption }
          </div>
                <div>	

		Current balance is : { this.state.currentBalance }


		</div>
		<div>
		<label htmlFor='wager'>wager</label>
		<input
			name='wager'
			placeholder='0'
			value = {this.state.wager}
			onChange={this.handleChange}
		/>
		</div>
				<div>
		<button>Play Round!</button>
		</div>
	</form>
	)
}
}

export default Form
